.TH notmuch-address-cache 1 "Sep 2017" "version v0.2"

.SH NAME
notmuch-address-cache - caches the result from notmuch-address and search within this cached version.

.SH SYNOPSIS
.B notmuch-address-cache
[ 
.I COMMAND 
] 
[ 
.I ARG 
]

.SH DESCRIPTION

.B notmuch-address-cache
is basically a cache in front of the 
.I notmuch-address
command.

notmuch-address-cache caches all sender and recipients you communicated with. 

.SH Commands

.TP
\fBhelp\fP, \fB--help\fP, \fB-h\fP
Show help text.
.TP
\fBversion\fP, \fB--version\fP, \fB-v\fP
Show the version.
.TP
\fBrebuild\fP, \fB--rebuild\fP, \fB-r\fP [\fB--json\fP | \fB--text\fP]
Uses \fInotmuch-address\fP to find all sender/recipient you communicated with and print them out to the file \fI~/.notmuch-address-cache/addresses\fP. The format of the cached addresses are stored in json, if you rebuild your cache with option \fB--json\fP. The format of the cached addresses are stored in text, if you rebuild your cache with option\fB--text\fP. Format text is recommended if you want to query the cache with \fBmutt\fP. Format json is recommended if you want to query the cache with \fBalot\fP.
.TP
\fBupdate\fP, \fB--update\fP, \fB-u\fP [\fB--json\fP | \fB--text\fP]
Uses \fInotmuch-address\fP to find all sender/recipient, based on the \fBtag:new\fP, you communicated with and prepend them out to the file \fI~/.notmuch-address-cache/addresses\fP. It expect the notmuch tag \fbtag:new\fP on all messages to extract the sender and recipients from there. You can configure notmuch to apply the \fBtag:new\fP to all messages. This is basically done if you edit the file \fI~/.notmuch-config\fP, go into section [new] and add the value \fBnew\fP to the key \fBtags\fP. For more details see https://notmuchmail.org/initial_tagging/ in section 'The \fInew\fP tag approach'. The format of the cached addresses are stored in json, if you update your cache with option \fB--json\fP. The format of the cached addresses are stored in text, if you update your cache with option \fB--text\fP.
.TP
\fBquery\fP, \fB--query\fP, \fB-q\fP
Greps the cache file for the given query. Interpret the query as an extended regular expression. Perform case insesitive matching.

.SH Example Workflow - Rebuild the cache
.TP
\fBmutt\fP - Using mutt as mua
Rebuild your cache by Executing \fbnotmuch-address-cache rebuild --text\fP. Edit your \fI.muttrc\fP file and add the query command \fBset query_command = "notmuch-address-cache query '%s'"\fP.
.TP
\fBalot\fP - Using alot as mua
Rebuild your cache by Executing \fbnotmuch-address-cache rebuild --json\fP. Edit your \fI.config/alot/config\fP file and add the query command under the \fIabook\fP section.  \fBcommand = 'notmuch-address-cache query'\fP.

[accounts]
  [[youraccount]]
    [[abook]]
      type = shellcommand
      command = 'notmuch-address-cache query'
      regexp = '\\[?{"name": "(?P<name>.*)", "address": "(?P<email>.+)", "name-addr": ".*"}[,\\]]?'
      shellcommand_external_filtering = False

.SH Example Workflow - Update the cache based on new incoming emails
Setup notmuch to use 'The \fInew\fP tag approach'. The new approach is there to act only on new emails instead of the whole mail database. This will speedup the entire update of your address cache. See https://notmuchmail.org/initial_tagging/. After that you can do it manual by executing \fBnotmuch-address-cache update --json\fP or
\fBnotmuch-address-cache update --text\fP.

If you are using offlineimap you can configure a postsynchook to update your cache. See e.g. http://www.offlineimap.org/doc/ConfigurationFactorization.html.
